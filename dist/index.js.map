{"version":3,"file":"index.js","mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC3CA;;;;;;;;AAAA;;;;;;;;AAAA;;;;;;;;AAAA;;;;;;;;AAAA;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7BA;AACA;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":[".././action.js",".././issues.js",".././milestones.js",".././octokit.js","../../../.nvm/versions/node/v20.13.0/lib/node_modules/@vercel/ncc/dist/ncc/@@notfound.js","../webpack/bootstrap","../webpack/runtime/compat",".././index.js"],"sourcesContent":["const core = require('@actions/core');\nconst github = require('@actions/github');\nconst issues = require('./issues');\nconst milestones = require('./milestones');\nconst octokit = require('./octokit');\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nasync function run() {\n  try {\n    const body = core.getInput('body', { required: true });\n    const milestone = parseInt(core.getInput('milestone'));\n    const state = core.getInput('state');\n    const token = core.getInput('token');\n\n    const client = await octokit(token);\n    const repo = github.context.repo;\n\n    const milestoneIssues = await milestones.listIssues(client, repo.owner, repo.repo, milestone, state);\n\n    await Promise.all(milestoneIssues.map(async issue => {\n      await issues.createComment(client, repo.owner, repo.repo, issue.number, body);\n\n      core.debug(`Waiting 2 seconds between requests: https://docs.github.com/en/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits`);\n      await sleep(2000);\n    }));\n\n    const outputs = {\n      ids: milestoneIssues.map(issue => issue.number).join(','),\n    };\n\n    core.setOutput('ids', outputs.ids);\n\n    return outputs;\n  } catch (err) {\n    core.setFailed(err.message);\n    throw err;\n  }\n}\n\nmodule.exports = run;\n","async function createComment(client, owner, repo, issueNumber, body) {\n  client.log.info(`Commenting on issue: ${issueNumber}`);\n\n  try {\n    await client.rest.issues.createComment({\n      owner: owner,\n      repo: repo,\n      issue_number: issueNumber,\n      body: body,\n    });\n  } catch(err) {\n    client.log.error(`Unable to comment on issue (${issueNumber}): ${err}`);\n    throw err;\n  }\n}\n\nexports.createComment = createComment;\n","async function listIssues(client, owner, repo, milestone, state) {\n  client.log.info(`Listing issues for milestone: ${milestone}`);\n\n  try {\n    const issues = await client.paginate(\n      client.rest.issues.listForRepo,\n      {\n        owner: owner,\n        repo: repo,\n        milestone: milestone,\n        state: state\n      }\n    );\n\n    client.log.info(`Found milestone issues: ${issues.map(issue => issue.number).join(', ')}`);\n\n    return issues;\n  } catch (err) {\n    client.log.error(`Unable to list issues for milestone (${milestone}): ${err}`);\n    throw err;\n  }\n}\n\nexports.listIssues = listIssues;\n","const core = require('@actions/core');\nconst { GitHub, getOctokitOptions } = require('@actions/github/lib/utils')\nconst { retry } = require('@octokit/plugin-retry')\nconst { throttling } = require('@octokit/plugin-throttling')\n\nconst rateLimitRetries = 5\nconst secondaryRateLimitRetries = 5\n\nmodule.exports = function client(token) {\n    const Octokit = GitHub.plugin(throttling, retry);\n    const options = getOctokitOptions(token);\n\n    options.log = {\n        debug: core.debug,\n        info: core.info,\n        warning: core.warning,\n        error: core.error,\n    };\n\n    options.throttle = {\n        onSecondaryRateLimit(retryAfter, options, oktokit, retryCount) {\n            core.info(`Secondary rate limit triggered for request ${options.method} ${options.url} (attempt ${retryCount}/${secondaryRateLimitRetries})`)\n\n            if (retryCount < secondaryRateLimitRetries) {\n                core.info(`Retrying after ${retryAfter} seconds`)\n                return true\n            }\n\n            core.warning(`Exhausted secondary rate limit retry count (${secondaryRateLimitRetries}) for ${options.method} ${options.url}`)\n        },\n        onRateLimit(retryAfter, options, oktokit, retryCount) {\n            core.info(`Rate limit triggered for request ${options.method} ${options.url} (attempt ${retryCount}/${rateLimitRetries})`)\n\n            if (retryCount < rateLimitRetries) {\n                core.info(`Retrying after ${retryAfter} seconds`)\n                return true\n            }\n\n            core.warning(`Exhausted rate limit retry count (${rateLimitRetries}) for ${options.method} ${options.url}`)\n        }\n    };\n\n    return new Octokit(options);\n}\n",null,"// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";","const action = require('./action');\n\nasync function run() {\n  try {\n    await action();\n  } catch(err) {\n    return;\n  }\n}\n\nrun();\n"],"names":[],"sourceRoot":""}